#!/usr/bin/python
import os
import httplib as http
import stat
from urlparse import urlparse
import xml.etree.ElementTree as ET
from zipfile import ZipFile

class HTTPSClient(object):
    @classmethod
    def get(self, host, path):
        conn = http.HTTPSConnection(host)
        conn.request("GET", path)
        resp = conn.getresponse()
        result = resp.read()
        resp.close()
        if 300 <= resp.status < 400:
            url = urlparse(resp.getheader('Location'))
            return self.get(url.netloc, "%s?%s" % (url.path, url.query))
        return result

class System(object):
    MAPPING = {
        "darwin x86_64": "darwin-amd64.zip",
        "linux x86_64": "linux-amd64.zip",
        "linux i686": "linux-386.zip"
    }

    def __init__(self, platform, architecture):
        self.platform = platform
        self.architecture = architecture
        self.zip = System.MAPPING["%s %s" % (platform, architecture)]

class Releases(object):
    FEED_HOST = "github.com"
    FEED_PATH = "/Shopify/themekit/releases.atom"
    NS = "{http://www.w3.org/2005/Atom}"

    def __init__(self, system):
        self.releases = []
        self.sys = system

    def all(self):
        return self.__releases()

    def latest(self):
        return self.__releases()[0]

    def __releases(self):
        if len(self.releases) == 0:
            self.__parsefeed()
        return self.releases

    def __parsefeed(self):
        ns = Releases.NS
        if self.releases != []:
            return
        doc = ET.XML(self.__getfeed())
        entries = doc.findall(ns+"entry")
        versions = map(lambda e: os.path.basename(e.find(ns+"link").get('href')), entries)
        self.releases = map(lambda v: (Releases.FEED_HOST, "/Shopify/themekit/releases/download/%s/%s" % (v, self.sys.zip), self.sys.zip), versions)

    def __getfeed(self):
        return HTTPSClient.get(Releases.FEED_HOST, Releases.FEED_PATH)

class Installer(object):
    def __init__(self, ziplocation, installlocation="~/.themekit"):
        self.host, self.path, self.root = ziplocation
        self.root = self.root.replace('.zip', '')
        self.zipfile = os.path.basename(self.path)
        self.installlocation = os.path.expanduser(installlocation)

    def install(self):
        self.__createdir()
        print "Downloading themekit from %s/%s" % (self.host, self.path)
        self.__download()
        print "Installing themekit to %s" % self.installlocation
        self.__unzip()
        print "Removing temporary files from disk"
        self.__clean()
        print
        self.__pathinstall()

    def __createdir(self):
        if not os.path.exists(self.installlocation):
            os.makedirs(self.installlocation)

    def __download(self):
        data = HTTPSClient.get(self.host, self.path)
        output = open(self.zipfile, 'wb')
        output.write(data)
        output.flush()
        output.close()

    def __clean(self):
        os.remove(self.zipfile)

    def __unzip(self):
        with ZipFile(self.zipfile, 'r') as unzip:
            theme = unzip.open('%s/theme' % self.root)
            self.__save(theme)

    def __save(self, theme):
        filename = "%s/%s" % (self.installlocation, 'theme')
        dest = open(filename, 'wb')
        dest.write(theme.read())
        dest.flush()
        dest.close()
        os.chmod(filename, stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR)

    def __pathinstall(self):
        setpathvar = "PATH=%s:$PATH" % self.installlocation
        print "themekit has been installed at %s" % self.installlocation
        print "Add the following to the rc file for your shell (bash, zsh, etc.):"
        print
        print "\t%s" % setpathvar
        print
        print "For example to add themekit to your .bashrc:"
        print
        print '''\techo 'PATH="%s:$PATH"' >> ~/.bashrc''' % self.installlocation
        print '\tsource ~/.bashrc'
        print
        print 'To verify themekit is working simply type "theme -h"'


def systemCommand(command):
    pipe = os.popen(command)
    result = pipe.readline()
    pipe.close()
    return result.strip().lower()

platform = systemCommand("uname")
architecture = systemCommand("uname -m")

system = System(platform, architecture)
releases = Releases(system)
Installer(releases.latest()).install()
